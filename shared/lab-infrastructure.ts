import { z } from "zod";

// OSI Layer Infrastructure Mapping
export const OSILayer = z.enum([
  'physical',
  'data-link', 
  'network',
  'transport',
  'session',
  'presentation',
  'application'
]);

export type OSILayerType = z.infer<typeof OSILayer>;

// Infrastructure Component Types
export const InfrastructureType = z.enum([
  'endpoints',
  'network-devices',
  'cloud-platforms', 
  'identity-providers',
  'email-gateways',
  'web-proxies',
  'siems-soars',
  'virtualization',
  'storage',
  'databases'
]);

export type InfrastructureTypeType = z.infer<typeof InfrastructureType>;

// Data Source Types Generated by Infrastructure
export const DataSourceSchema = z.object({
  name: z.string(),
  type: z.string(),
  description: z.string(),
  sampleFields: z.array(z.string()),
  logFormat: z.string().optional(),
  volume: z.enum(['low', 'medium', 'high']).optional(),
  retention: z.string().optional()
});

// Infrastructure Component Schema
export const InfrastructureComponentSchema = z.object({
  id: z.string(),
  name: z.string(),
  type: InfrastructureType,
  osiLayer: OSILayer,
  description: z.string(),
  dataSources: z.array(DataSourceSchema),
  requirements: z.object({
    cpu: z.string().optional(),
    memory: z.string().optional(),
    storage: z.string().optional(),
    network: z.string().optional(),
    os: z.string().optional()
  }),
  deployment: z.object({
    terraform: z.string().optional(),
    ansible: z.string().optional(),
    dockerCompose: z.string().optional(),
    kubernetes: z.string().optional(),
    manual: z.array(z.string()).optional()
  }),
  configuration: z.record(z.any()).optional(),
  dependencies: z.array(z.string()).optional(),
  estimatedCost: z.object({
    hourly: z.number().optional(),
    monthly: z.number().optional(),
    setup: z.number().optional()
  }).optional()
});

// Lab Build Step Schema
export const LabBuildStepSchema = z.object({
  id: z.string(),
  phase: z.string(),
  osiLayer: OSILayer,
  title: z.string(),
  description: z.string(),
  duration: z.string(),
  prerequisites: z.array(z.string()),
  instructions: z.array(z.string()),
  commands: z.array(z.object({
    platform: z.string(), // terraform, ansible, bash, powershell, etc
    code: z.string()
  })).optional(),
  validation: z.array(z.string()),
  troubleshooting: z.array(z.string()).optional(),
  components: z.array(z.string()), // Component IDs
  estimatedCost: z.number().optional()
});

// TTP Execution Schema  
export const TTPExecutionSchema = z.object({
  id: z.string(),
  name: z.string(),
  mitreId: z.string().optional(),
  description: z.string(),
  platform: z.enum(['atomic-red-team', 'caldera', 'manual-script', 'custom']),
  execution: z.object({
    atomicTest: z.string().optional(), // Atomic Red Team test ID
    calderaAbility: z.string().optional(), // Caldera ability ID
    customScript: z.string().optional(),
    parameters: z.record(z.any()).optional()
  }),
  expectedLogs: z.array(z.string()),
  detectionRules: z.array(z.string()).optional(),
  cleanup: z.array(z.string()).optional()
});

// Taxonomy Mapping Schema
export const TaxonomyMappingSchema = z.object({
  stix: z.array(z.string()).optional(),
  mitreAttack: z.array(z.string()).optional(),
  openIOC: z.array(z.string()).optional(),
  veris: z.array(z.string()).optional(),
  mispTaxonomies: z.array(z.string()).optional(),
  sigmaRules: z.array(z.string()).optional()
});

// Lab Build Plan Schema
export const LabBuildPlanSchema = z.object({
  id: z.string(),
  threatReportId: z.string(),
  threatName: z.string(),
  description: z.string(),
  totalDuration: z.string(),
  totalCost: z.object({
    setup: z.number(),
    hourly: z.number(),
    monthly: z.number()
  }),
  phases: z.array(z.object({
    name: z.string(),
    osiLayer: OSILayer,
    duration: z.string(),
    steps: z.array(z.string()) // Step IDs
  })),
  components: z.array(InfrastructureComponentSchema),
  steps: z.array(LabBuildStepSchema),
  ttpExecution: z.array(TTPExecutionSchema),
  taxonomyMapping: TaxonomyMappingSchema,
  validation: z.object({
    dataIngestion: z.array(z.string()),
    detectionRules: z.array(z.string()),
    alertGeneration: z.array(z.string()),
    responsePlaybooks: z.array(z.string())
  }),
  createdAt: z.date().default(() => new Date()),
  updatedAt: z.date().default(() => new Date())
});

// Export types
export type DataSource = z.infer<typeof DataSourceSchema>;
export type InfrastructureComponent = z.infer<typeof InfrastructureComponentSchema>;
export type LabBuildStep = z.infer<typeof LabBuildStepSchema>;
export type TTPExecution = z.infer<typeof TTPExecutionSchema>;
export type TaxonomyMapping = z.infer<typeof TaxonomyMappingSchema>;
export type LabBuildPlan = z.infer<typeof LabBuildPlanSchema>;

// Infrastructure Data Source Mapping
export const INFRASTRUCTURE_DATA_SOURCES = {
  endpoints: [
    { name: 'EDR Logs', type: 'endpoint', description: 'Process execution, file operations, registry access', sampleFields: ['process_name', 'command_line', 'parent_process', 'file_path', 'registry_key'], logFormat: 'JSON', volume: 'high' as const },
    { name: 'Process Trees', type: 'endpoint', description: 'Parent-child process relationships', sampleFields: ['pid', 'ppid', 'process_path', 'start_time', 'user'], logFormat: 'JSON', volume: 'medium' as const },
    { name: 'Registry Access', type: 'endpoint', description: 'Registry key modifications and queries', sampleFields: ['registry_path', 'value_name', 'value_data', 'operation_type'], logFormat: 'JSON', volume: 'medium' as const },
    { name: 'File Operations', type: 'endpoint', description: 'File creation, deletion, modification events', sampleFields: ['file_path', 'operation', 'hash', 'size', 'timestamps'], logFormat: 'JSON', volume: 'high' as const }
  ],
  'network-devices': [
    { name: 'NetFlow', type: 'network', description: 'Network traffic flow records', sampleFields: ['src_ip', 'dst_ip', 'src_port', 'dst_port', 'protocol', 'bytes', 'packets'], logFormat: 'Binary/JSON', volume: 'high' as const },
    { name: 'PCAPs', type: 'network', description: 'Full packet capture data', sampleFields: ['packet_data', 'timestamp', 'src_mac', 'dst_mac', 'protocol_stack'], logFormat: 'Binary', volume: 'high' as const },
    { name: 'DNS Logs', type: 'network', description: 'DNS query and response logs', sampleFields: ['query', 'response', 'record_type', 'client_ip', 'server_ip'], logFormat: 'Text/JSON', volume: 'medium' as const },
    { name: 'Firewall Logs', type: 'network', description: 'Allow/deny decisions and rule matches', sampleFields: ['action', 'rule_id', 'src_ip', 'dst_ip', 'port', 'protocol'], logFormat: 'Text/JSON', volume: 'high' as const }
  ],
  'cloud-platforms': [
    { name: 'CloudTrail', type: 'cloud', description: 'AWS API call logs and management events', sampleFields: ['event_name', 'user_identity', 'source_ip', 'resources', 'request_parameters'], logFormat: 'JSON', volume: 'high' as const },
    { name: 'GCP Audit', type: 'cloud', description: 'Google Cloud Platform audit logs', sampleFields: ['service_name', 'method_name', 'caller_ip', 'resource_name', 'request'], logFormat: 'JSON', volume: 'high' as const },
    { name: 'Azure Activity', type: 'cloud', description: 'Azure resource management and access logs', sampleFields: ['operation_name', 'caller', 'resource_group', 'subscription_id', 'properties'], logFormat: 'JSON', volume: 'high' as const },
    { name: 'CSPM Logs', type: 'cloud', description: 'Cloud Security Posture Management findings', sampleFields: ['finding_type', 'severity', 'resource_id', 'compliance_status', 'remediation'], logFormat: 'JSON', volume: 'medium' as const }
  ],
  'identity-providers': [
    { name: 'Okta Logs', type: 'identity', description: 'Authentication and authorization events', sampleFields: ['event_type', 'actor', 'target', 'client', 'outcome', 'debug_context'], logFormat: 'JSON', volume: 'medium' as const },
    { name: 'Azure AD', type: 'identity', description: 'Azure Active Directory sign-in and audit logs', sampleFields: ['user_principal_name', 'app_display_name', 'ip_address', 'location', 'risk_detail'], logFormat: 'JSON', volume: 'medium' as const },
    { name: 'Duo Logs', type: 'identity', description: 'Multi-factor authentication events', sampleFields: ['username', 'factor', 'result', 'ip_address', 'device'], logFormat: 'JSON', volume: 'medium' as const },
    { name: 'IAM Policy Changes', type: 'identity', description: 'Identity and Access Management policy modifications', sampleFields: ['policy_name', 'action', 'principal', 'resource', 'conditions'], logFormat: 'JSON', volume: 'low' as const }
  ],
  'email-gateways': [
    { name: 'Email Headers', type: 'email', description: 'Email metadata and routing information', sampleFields: ['from', 'to', 'subject', 'message_id', 'received_headers', 'spf', 'dkim'], logFormat: 'Text/JSON', volume: 'medium' as const },
    { name: 'Phishing Links', type: 'email', description: 'URL analysis and reputation data', sampleFields: ['url', 'reputation_score', 'category', 'redirect_chain', 'threat_types'], logFormat: 'JSON', volume: 'medium' as const },
    { name: 'Spam Filters', type: 'email', description: 'Spam detection and filtering results', sampleFields: ['spam_score', 'filter_rules', 'quarantine_status', 'attachment_analysis'], logFormat: 'JSON', volume: 'high' as const }
  ],
  'web-proxies': [
    { name: 'URL Access Logs', type: 'proxy', description: 'Web request and response logs', sampleFields: ['url', 'method', 'status_code', 'user_agent', 'referer', 'bytes'], logFormat: 'Text/JSON', volume: 'high' as const },
    { name: 'Proxy Authentication', type: 'proxy', description: 'User authentication events', sampleFields: ['username', 'auth_method', 'client_ip', 'success', 'groups'], logFormat: 'JSON', volume: 'medium' as const },
    { name: 'Downloads', type: 'proxy', description: 'File download events and analysis', sampleFields: ['file_name', 'file_hash', 'file_type', 'size', 'malware_scan_result'], logFormat: 'JSON', volume: 'medium' as const }
  ],
  'siems-soars': [
    { name: 'Correlation Rules', type: 'siem', description: 'SIEM correlation rule matches and alerts', sampleFields: ['rule_id', 'rule_name', 'severity', 'matched_events', 'false_positive_probability'], logFormat: 'JSON', volume: 'medium' as const },
    { name: 'Alert Metadata', type: 'siem', description: 'Alert enrichment and context data', sampleFields: ['alert_id', 'assignee', 'status', 'tags', 'comments', 'escalation_level'], logFormat: 'JSON', volume: 'medium' as const },
    { name: 'Case Artifacts', type: 'siem', description: 'Incident response artifacts and evidence', sampleFields: ['case_id', 'artifact_type', 'hash', 'file_path', 'analysis_result'], logFormat: 'JSON', volume: 'low' as const }
  ]
};

// Pre-defined Infrastructure Components
export const INFRASTRUCTURE_COMPONENTS = {
  // Physical Layer
  'vmware-server': {
    id: 'vmware-server',
    name: 'VMware vSphere Server',
    type: 'virtualization' as InfrastructureTypeType,
    osiLayer: 'physical' as OSILayerType,
    description: 'VMware vSphere infrastructure for hosting virtual machines',
    dataSources: [],
    requirements: { cpu: '16+ cores', memory: '64GB+', storage: '1TB SSD', network: 'Gigabit' },
    deployment: {
      manual: [
        'Install VMware vSphere ESXi on bare metal server',
        'Configure management network and vCenter connection',
        'Create VM templates for different OS types',
        'Set up resource pools and DRS rules'
      ]
    },
    estimatedCost: { setup: 0, hourly: 0, monthly: 200 }
  },
  
  // Network Layer
  'pfsense-firewall': {
    id: 'pfsense-firewall',
    name: 'pfSense Firewall',
    type: 'network-devices' as InfrastructureTypeType,
    osiLayer: 'network' as OSILayerType,
    description: 'Open-source firewall for network segmentation and logging',
    dataSources: INFRASTRUCTURE_DATA_SOURCES['network-devices'],
    requirements: { cpu: '2 cores', memory: '4GB', storage: '20GB', network: 'Multiple NICs' },
    deployment: {
      terraform: `
resource "vsphere_virtual_machine" "pfsense" {
  name             = "pfsense-fw"
  resource_pool_id = data.vsphere_compute_cluster.cluster.resource_pool_id
  datastore_id     = data.vsphere_datastore.datastore.id
  num_cpus         = 2
  memory           = 4096
  guest_id         = "freebsd64Guest"
  
  network_interface {
    network_id = data.vsphere_network.wan.id
  }
  
  network_interface {
    network_id = data.vsphere_network.lan.id
  }
  
  disk {
    label = "disk0"
    size  = 20
  }
}`,
      manual: [
        'Configure WAN and LAN interfaces',
        'Set up firewall rules for lab traffic',
        'Enable logging for all traffic',
        'Configure syslog forwarding to SIEM'
      ]
    },
    estimatedCost: { setup: 0, hourly: 0.05, monthly: 36 }
  },
  
  // Application Layer
  'windows-dc': {
    id: 'windows-dc',
    name: 'Windows Domain Controller',
    type: 'identity-providers' as InfrastructureTypeType,
    osiLayer: 'application' as OSILayerType,
    description: 'Windows Active Directory Domain Controller',
    dataSources: INFRASTRUCTURE_DATA_SOURCES['identity-providers'],
    requirements: { cpu: '4 cores', memory: '8GB', storage: '100GB', os: 'Windows Server 2019+' },
    deployment: {
      terraform: `
resource "vsphere_virtual_machine" "windows_dc" {
  name             = "lab-dc01"
  resource_pool_id = data.vsphere_compute_cluster.cluster.resource_pool_id
  datastore_id     = data.vsphere_datastore.datastore.id
  num_cpus         = 4
  memory           = 8192
  guest_id         = "windows2019srvNext_64Guest"
  
  network_interface {
    network_id = data.vsphere_network.lab_network.id
  }
  
  disk {
    label = "disk0"
    size  = 100
  }
}`,
      ansible: `
- name: Configure Windows Domain Controller
  hosts: windows_dc
  tasks:
    - name: Install AD DS Role
      win_feature:
        name: AD-Domain-Services
        state: present
        include_management_tools: yes
        
    - name: Promote to Domain Controller
      win_domain:
        dns_domain_name: lab.local
        safe_mode_password: "{{ vault_safe_mode_password }}"
        state: present`,
      manual: [
        'Install Windows Server 2019/2022',
        'Configure static IP address',
        'Install Active Directory Domain Services role',
        'Promote server to domain controller',
        'Create lab users and groups',
        'Enable advanced audit logging'
      ]
    },
    estimatedCost: { setup: 200, hourly: 0.15, monthly: 108 }
  }
};