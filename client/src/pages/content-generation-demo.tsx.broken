import { useState, useEffect } from "react";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Textarea } from "@/components/ui/textarea";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { 
  Database, Workflow, Layout, BarChart3, Play, Download, 
  Copy, FileText, Shield, Zap, Target, Code, CheckCircle,
  AlertTriangle, Clock, ArrowRight, RefreshCw, Eye, Info
} from "lucide-react";
import { useToast } from "@/hooks/use-toast";
import XQLPreviewModal from "@/components/xql-preview-modal";
import PlaybookPreviewModal from "@/components/playbook-preview-modal";
import AlertLayoutPreviewModal from "@/components/alert-layout-preview-modal";
import DashboardPreviewModal from "@/components/dashboard-preview-modal";
import FallbackContentDemo from "@/components/fallback-content-demo";

export default function ContentGenerationDemo() {
  const [activeContentType, setActiveContentType] = useState('correlation');
  const [generationPhase, setGenerationPhase] = useState('requirement');
  const [isGenerating, setIsGenerating] = useState(false);
  const [showFallbackDemo, setShowFallbackDemo] = useState(false);
  const [hasApiKeys, setHasApiKeys] = useState(false);
  const [showXQLPreview, setShowXQLPreview] = useState(false);
  const [showPlaybookPreview, setShowPlaybookPreview] = useState(false);
  const [showLayoutPreview, setShowLayoutPreview] = useState(false);
  const [showDashboardPreview, setShowDashboardPreview] = useState(false);
  const { toast } = useToast();

  // Check for API keys on component mount
  useEffect(() => {
    const checkApiKeys = async () => {
      try {
        const response = await fetch('/api/check-ai-capabilities');
        setHasApiKeys(response.ok);
      } catch (error) {
        setHasApiKeys(false);
      }
    };
    checkApiKeys();
  }, []);

  const [selectedDataSource, setSelectedDataSource] = useState('windows_defender');

  const threatExamples = {
    windows_defender: {
      name: "APT29 Cozy Bear Malware Detection",
      category: "endpoint",
      severity: "critical",
      description: "Advanced persistent threat using process injection and email exploitation",
      dataSources: ["Microsoft Defender for Endpoint", "Windows Event Logs", "Microsoft Graph Security"],
      mitreAttack: ["T1566.001", "T1055.012", "T1027.010"],
      indicators: ["Process injection patterns", "Email-based exploitation", "PowerShell obfuscation"]
    },
    aws_cloudtrail: {
      name: "Privilege Escalation via IAM Policy Manipulation", 
      category: "cloud",
      severity: "high",
      description: "Detect unauthorized modifications to IAM policies that could lead to privilege escalation",
      dataSources: ["AWS CloudTrail", "AWS Config", "AWS IAM"],
      mitreAttack: ["T1098.001", "T1484.002"],
      indicators: ["Policy attachment to user/role", "Unusual API calls", "Cross-account access"]
    },
    crowdstrike: {
      name: "Falcon Detection: Living-off-the-Land Attack",
      category: "endpoint", 
      severity: "high",
      description: "Advanced threat actor using legitimate tools for malicious activities",
      dataSources: ["CrowdStrike Falcon", "Process Telemetry", "Network Behavior"],
      mitreAttack: ["T1218", "T1105", "T1027"],
      indicators: ["Legitimate binary abuse", "Network anomalies", "Process hollowing"]
    },
    kubernetes: {
      name: "Container Breakout Attempt",
      category: "cloud",
      severity: "critical", 
      description: "Detect attempts to escape container boundaries and access host system",
      dataSources: ["Kubernetes Audit Logs", "Container Runtime", "Falco Events"],
      mitreAttack: ["T1611", "T1610", "T1055"],
      indicators: ["Privileged container creation", "Host filesystem access", "Kernel exploitation"]
    }
  };

  const currentThreat = threatExamples[selectedDataSource as keyof typeof threatExamples];

  const contentTypes = [
    {
      id: 'correlation',
      name: 'XQL Correlation Rule',
      icon: Database,
      color: 'bg-blue-500',
      description: 'Detection logic for XSIAM correlation engine',
      ddlcPhase: 'development'
    },
    {
      id: 'playbook',
      name: 'Automation Playbook',
      icon: Workflow,
      color: 'bg-purple-500',
      description: 'Automated response workflow for SOC analysts',
      ddlcPhase: 'development'
    },
    {
      id: 'alert_layout',
      name: 'Alert Layout',
      icon: Layout,
      color: 'bg-green-500',
      description: 'Analyst interface with contextual information',
      ddlcPhase: 'design'
    },
    {
      id: 'dashboard',
      name: 'Operational Dashboard',
      icon: BarChart3,
      color: 'bg-orange-500',
      description: 'Threat monitoring and KPI visualization',
      ddlcPhase: 'monitoring'
    }
  ];

  // Generate dynamic content based on selected data source
  const getGeneratedContent = () => {
    const currentThreat = threatExamples[selectedDataSource as keyof typeof threatExamples];
    
    const dataSourceQueries = {
      windows_defender: "dataset = msft_defender_atp_raw\\n    | filter event_type = \\"ProcessCreation\\"\\n    | filter process_command_line contains \\"powershell\\"\\n    | filter process_command_line contains \\"System.Diagnostics.Process\\"\\n    | alter injection_indicators = if(process_command_line contains \\"VirtualAlloc\\", 1, 0)",
      aws_cloudtrail: "dataset = aws_cloudtrail_raw\\n    | filter event_name in (\\"AttachUserPolicy\\", \\"PutUserPolicy\\", \\"CreateRole\\")\\n    | filter user_name != source_user_name\\n    | filter error_code = null\\n    | alter privilege_escalation_risk = if(event_name contains \\"Policy\\", \\"high\\", \\"medium\\")",
      crowdstrike: "dataset = crowdstrike_falcon_raw\\n    | filter event_type = \\"ProcessRollup2\\"\\n    | filter file_name in (\\"cmd.exe\\", \\"powershell.exe\\", \\"wmic.exe\\")\\n    | filter process_command_line contains \\"living-off-land\\"\\n    | alter lolbas_score = if(file_name = \\"powershell.exe\\", 3, 2)",
      kubernetes: "dataset = kubernetes_audit_raw\\n    | filter verb = \\"create\\"\\n    | filter object_resource = \\"pods\\"\\n    | filter request_object_spec_security_context_privileged = true\\n    | alter container_breakout_risk = \\"critical\\""
    };

    return {
      correlation: {
        title: `${selectedDataSource}_${currentThreat.name.toLowerCase().replace(/\s+/g, '_')}_correlation.json`,
        content: `{
  "rule_name": "${currentThreat.name.replace(/\s+/g, '_')}",
  "description": "${currentThreat.description}",
  "severity": "${currentThreat.severity}",
  "category": "${currentThreat.category}",
  "xql_query": "${dataSourceQueries[selectedDataSource as keyof typeof dataSourceQueries]}",
  "data_sources": ${JSON.stringify(currentThreat.dataSources, null, 4)},
  "mitre_attack": ${JSON.stringify(currentThreat.mitreAttack, null, 4)},
  "indicators": ${JSON.stringify(currentThreat.indicators, null, 4)}
}`,
        validation: {
          syntax: `✓ Valid XQL syntax for ${selectedDataSource}`,
          fields: "✓ Required fields validated",
          performance: "✓ Query optimized for <5s execution",
          coverage: `✓ Covers ${currentThreat.mitreAttack.length} MITRE techniques`
        }
      },
    playbook: {
      title: "vpn_anomaly_response_playbook.yml",
      content: `name: "VPN Anomaly Response Workflow"
description: "Automated response for suspicious VPN login alerts"
version: "1.0"
category: "identity_security"

inputs:
  - alert_id
  - user_name  
  - source_country
  - risk_score

tasks:
  - id: "1"
    name: "Extract Alert Context"
    type: "builtin"
    script: "GetAlertExtraData"
    arguments:
      alert_id: \${inputs.alert_id}
    outputs:
      - alert_details

  - id: "2" 
    name: "Check User Groups"
    type: "integration"
    script: "ad-get-user"
    arguments:
      username: \${inputs.user_name}
    outputs:
      - user_groups
      - user_manager
    
  - id: "3"
    name: "Risk Assessment"
    type: "condition"
    condition: \${inputs.risk_score} >= 4
    "yes": ["4"]
    "no": ["6"]

  - id: "4"
    name: "Immediate Notification"
    type: "integration" 
    script: "send-mail"
    arguments:
      to: \${user_manager}
      subject: "High-Risk VPN Access Alert - \${inputs.user_name}"
      body: |
        User \${inputs.user_name} connected via VPN from \${inputs.source_country}.
        This requires immediate verification.
        
        Please confirm if this access is authorized within 2 hours.
        
        Alert ID: \${inputs.alert_id}
        Risk Score: \${inputs.risk_score}
    
  - id: "5"
    name: "Create ServiceNow Ticket"
    type: "integration"
    script: "servicenow-create-ticket"
    arguments:
      short_description: "VPN Anomaly - \${inputs.user_name}"
      priority: "high"
      assignment_group: "SOC_Tier2"
      
  - id: "6"
    name: "Standard Documentation"
    type: "builtin"
    script: "CreateNote"
    arguments:
      entry: "VPN connection from \${inputs.source_country} logged for monitoring"

outputs:
  - playbook_status
  - ticket_number
  - notification_sent`,
      validation: {
        syntax: "✓ Valid XSIAM playbook YAML",
        workflow: "✓ All task dependencies resolved",
        integration: "✓ Integration commands validated",
        testing: "✓ Tested with sample alert data"
      }
    },
    alert_layout: {
      title: "vpn_anomaly_alert_layout.json",
      content: `{
  "layout_name": "VPN_Anomaly_Alert_Layout",
  "description": "Analyst decision support for VPN anomaly alerts",
  "category": "identity_security",
  "sections": [
    {
      "name": "Alert Summary",
      "type": "summary",
      "fields": [
        {
          "name": "Alert Severity",
          "field": "alert.severity",
          "type": "badge",
          "color_mapping": {
            "critical": "red",
            "high": "orange", 
            "medium": "yellow"
          }
        },
        {
          "name": "User",
          "field": "alert.action_user",
          "type": "text",
          "enrichment": "user_profile"
        },
        {
          "name": "Source Country", 
          "field": "alert.action_country",
          "type": "text",
          "enrichment": "geolocation"
        },
        {
          "name": "Risk Score",
          "field": "alert.risk_score", 
          "type": "numeric",
          "threshold": {
            "5": "critical",
            "4": "high",
            "3": "medium"
          }
        }
      ]
    },
    {
      "name": "Analyst Actions",
      "type": "actions",
      "buttons": [
        {
          "name": "Verify User Location",
          "action": "ad-get-user-last-login",
          "parameters": ["alert.action_user"],
          "icon": "user-check"
        },
        {
          "name": "Check Travel Requests", 
          "action": "servicenow-search-tickets",
          "parameters": ["alert.action_user", "travel"],
          "icon": "calendar"
        },
        {
          "name": "Disable VPN Access",
          "action": "vpn-disable-user",
          "parameters": ["alert.action_user"],
          "icon": "shield-off",
          "confirmation": true
        },
        {
          "name": "Reset User Password",
          "action": "ad-reset-password", 
          "parameters": ["alert.action_user"],
          "icon": "key",
          "confirmation": true
        }
      ]
    },
    {
      "name": "Investigation Context",
      "type": "enrichment",
      "queries": [
        {
          "name": "Recent VPN Connections",
          "xql": "dataset = xdr_data | filter action_user = '\${alert.action_user}' | filter action_vpn_connect != null | filter _time > now() - 7d",
          "display": "table"
        },
        {
          "name": "User Group Memberships",
          "xql": "dataset = msft_azure_ad_raw | filter user_name = '\${alert.action_user}' | filter event_type = 'group_membership'",
          "display": "list"
        }
      ]
    }
  ],
  "decision_tree": {
    "executive_user": {
      "condition": "alert.action_user_groups contains 'Executives'",
      "actions": ["immediate_escalation", "manager_notification"]
    },
    "known_travel": {
      "condition": "travel_request_found = true",
      "actions": ["document_authorized_travel", "close_alert"]
    },
    "unauthorized_access": {
      "condition": "user_confirmation = false", 
      "actions": ["disable_account", "reset_credentials", "escalate_incident"]
    }
  }
}`,
      validation: {
        fields: "✓ All alert fields mapped correctly",
        actions: "✓ Analyst actions validated",
        enrichment: "✓ XQL queries tested",
        usability: "✓ Decision tree logic verified"
      }
    },
    dashboard: {
      title: "vpn_security_dashboard.json", 
      content: `{
  "dashboard_name": "VPN Security Monitoring",
  "description": "Operational dashboard for VPN threat monitoring",
  "category": "identity_security",
  "refresh_interval": "5m",
  "widgets": [
    {
      "id": "vpn_connections_map",
      "type": "geo_map",
      "title": "VPN Connections by Country (Last 24h)",
      "xql_query": "dataset = xdr_data | filter action_vpn_connect != null | filter _time > now() - 24h | stats count() by action_country | sort count desc",
      "visualization": {
        "type": "world_map",
        "color_scale": "threat_heatmap"
      },
      "size": "large"
    },
    {
      "id": "high_risk_alerts",
      "type": "metric",
      "title": "High-Risk VPN Alerts (24h)",
      "xql_query": "dataset = xdr_data | filter action_vpn_connect != null | filter risk_score >= 4 | filter _time > now() - 24h | stats count()",
      "visualization": {
        "type": "number", 
        "color": "red",
        "threshold": 10
      },
      "size": "small"
    },
    {
      "id": "executive_vpn_activity",
      "type": "table",
      "title": "Executive VPN Activity",
      "xql_query": "dataset = xdr_data | filter action_vpn_connect != null | filter action_user_groups contains 'Executives' | filter _time > now() - 7d | fields _time, action_user, action_country, action_source_ip",
      "size": "medium"
    },
    {
      "id": "vpn_trend_analysis", 
      "type": "line_chart",
      "title": "VPN Connection Trends (7 days)",
      "xql_query": "dataset = xdr_data | filter action_vpn_connect != null | filter _time > now() - 7d | bucket _time span=1h | stats count() by _time, action_country",
      "visualization": {
        "x_axis": "_time",
        "y_axis": "count",
        "series": "action_country"
      },
      "size": "large"
    },
    {
      "id": "false_positive_rate",
      "type": "gauge",
      "title": "False Positive Rate",
      "xql_query": "dataset = xdr_data | filter alert_type = 'vpn_anomaly' | filter _time > now() - 30d | eval fp_rate = false_positives / total_alerts * 100",
      "visualization": {
        "min": 0,
        "max": 100,
        "unit": "%",
        "thresholds": [5, 15, 30]
      },
      "size": "small"
    }
  ],
  "filters": [
    {
      "name": "Time Range",
      "type": "time_picker",
      "default": "24h"
    },
    {
      "name": "User Groups",
      "type": "multi_select", 
      "options": ["Executives", "IT_Admin", "Remote_Workers", "Contractors"]
    },
    {
      "name": "Risk Level",
      "type": "select",
      "options": ["All", "Critical", "High", "Medium"]
    }
  ],
  "alerts": [
    {
      "condition": "high_risk_alerts > 20",
      "action": "notify_soc_manager",
      "message": "Unusual spike in high-risk VPN alerts detected"
    }
  ]
}`,
      validation: {
        queries: "✓ All XQL queries validated",
        visualization: "✓ Widget configurations tested",
        performance: "✓ Dashboard loads in <3s",
        alerting: "✓ Alert thresholds configured"
      }
    }
  };

  const generateContent = async () => {
    setIsGenerating(true);
    
    // Simulate DDLC progression
    const phases = ['requirement', 'design', 'development', 'testing'];
    
    for (const phase of phases) {
      setGenerationPhase(phase);
      await new Promise(resolve => setTimeout(resolve, 800));
    }
    
    setIsGenerating(false);
    toast({
      title: "Content Generated Successfully",
      description: `${contentTypes.find(t => t.id === activeContentType)?.name} ready for deployment`,
    });
  };

  const copyToClipboard = (content: string) => {
    navigator.clipboard.writeText(content);
    toast({
      title: "Copied to Clipboard",
      description: "Content copied successfully",
    });
  };

  const downloadCompletePackage = async () => {
    try {
      // Import JSZip dynamically
      const JSZip = (await import('jszip')).default;
      const zip = new JSZip();

      // Add all content types to the zip
      const contentItems = [
        { type: 'correlation', extension: 'json', content: generatedContent.correlation },
        { type: 'playbook', extension: 'yml', content: generatedContent.playbook },
        { type: 'layout', extension: 'json', content: generatedContent.layout },
        { type: 'dashboard', extension: 'json', content: generatedContent.dashboard }
      ];

      contentItems.forEach(item => {
        if (item.content) {
          const filename = `${selectedDataSource}-${item.type}.${item.extension}`;
          zip.file(filename, item.content.content || '');
        }
      });

      // Add README file
      const readmeContent = `# ${currentThreat.name} - XSIAM Detection Package

## Overview
${currentThreat.description}

## Data Sources Required
${currentThreat.dataSources.join(', ')}

## MITRE ATT&CK Techniques
${currentThreat.mitreAttack.join(', ')}

## Package Contents
- XQL Correlation Rule (${selectedDataSource}-correlation.json)
- Automation Playbook (${selectedDataSource}-playbook.yml)
- Alert Layout (${selectedDataSource}-layout.json)
- Dashboard Configuration (${selectedDataSource}-dashboard.json)

## Installation
Import each file into your XSIAM/Cortex Cloud environment through the respective management interfaces.
`;
      
      zip.file('README.md', readmeContent);

      // Generate and download the zip
      const content = await zip.generateAsync({ type: 'blob' });
      const url = URL.createObjectURL(content);
      const a = document.createElement('a');
      a.href = url;
      a.download = `${selectedDataSource}-detection-package.zip`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);

      toast({
        title: "Package Downloaded",
        description: "Complete XSIAM detection package downloaded successfully",
      });
    } catch (error) {
      toast({
        title: "Download Failed",
        description: "Error creating package. Please try again.",
        variant: "destructive",
      });
    }
  };

  const downloadSingleContent = (contentType: string) => {
    const content = generatedContent[contentType as keyof typeof generatedContent];
    if (!content) return;

    const extensionMap = {
      correlation: 'json',
      playbook: 'yml', 
      layout: 'json',
      dashboard: 'json'
    };

    const extension = extensionMap[contentType as keyof typeof extensionMap];
    const filename = `${selectedDataSource}-${contentType}.${extension}`;
    
    const blob = new Blob([content.content || ''], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = filename;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);

    toast({
      title: "Content Downloaded",
      description: `${content.title} downloaded successfully`,
    });
  };

  const activeContent = generatedContent[activeContentType as keyof typeof generatedContent];
  const activeType = contentTypes.find(t => t.id === activeContentType);

  // Show fallback demo if no API keys available
  if (!hasApiKeys) {
    return (
      <div className="min-h-screen bg-white dark:bg-gray-900">
        <div className="max-w-7xl mx-auto p-6">
          <div className="mb-8">
            <h1 className="text-3xl font-bold text-gray-900 dark:text-white mb-2">
              Content-as-Code Generation Demo
            </h1>
            <p className="text-gray-600 dark:text-gray-300 mb-4">
              See how the platform generates complete XSIAM detection packages following DDLC framework
            </p>
          </div>
          <FallbackContentDemo />
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-white dark:bg-gray-900">
      <div className="max-w-7xl mx-auto p-6">
        
        {/* Header */}
        <div className="mb-8">
          <div className="flex items-center justify-between mb-4">
            <div>
              <h1 className="text-3xl font-bold text-gray-900 dark:text-white mb-2">
                Content-as-Code Generation Demo
              </h1>
              <p className="text-gray-600 dark:text-gray-300">
                See how the platform generates complete XSIAM detection packages following DDLC framework
              </p>
            </div>
            <Button 
              variant="outline" 
              onClick={() => setShowFallbackDemo(!showFallbackDemo)}
            >
              <Eye className="h-4 w-4 mr-2" />
              {showFallbackDemo ? 'Show Live Generation' : 'View Sample Demo'}
            </Button>
          </div>

          {showFallbackDemo && (
            <Alert className="mb-4">
              <Info className="h-4 w-4" />
              <AlertDescription>
                Viewing sample content generation. Switch to "Live Generation" for real-time AI-powered content creation.
              </AlertDescription>
            </Alert>
          )}
        </div>

        {showFallbackDemo ? (
          <FallbackContentDemo />
        ) : (
          <>
        
        {/* AI-Powered Generation Interface */}
        <div className="mb-8">
          
          {/* Data Source Selector */}
          <Card className="mb-6">
            <CardHeader className="pb-3">
              <CardTitle className="flex items-center gap-2">
                <Shield className="w-5 h-5 text-blue-600" />
                Data Source & Threat Scenario
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="flex flex-wrap gap-2 mb-4">
                <Button
                  variant={selectedDataSource === 'windows_defender' ? 'default' : 'outline'}
                  size="sm"
                  onClick={() => setSelectedDataSource('windows_defender')}
                  className="flex items-center gap-2"
                >
                  <Shield className="w-4 h-4" />
                  Windows Defender
                </Button>
                <Button
                  variant={selectedDataSource === 'aws_cloudtrail' ? 'default' : 'outline'}
                  size="sm"
                  onClick={() => setSelectedDataSource('aws_cloudtrail')}
                  className="flex items-center gap-2"
                >
                  <Database className="w-4 h-4" />
                  AWS CloudTrail
                </Button>
                <Button
                  variant={selectedDataSource === 'crowdstrike' ? 'default' : 'outline'}
                  size="sm"
                  onClick={() => setSelectedDataSource('crowdstrike')}
                  className="flex items-center gap-2"
                >
                  <Eye className="w-4 h-4" />
                  CrowdStrike Falcon
                </Button>
                <Button
                  variant={selectedDataSource === 'kubernetes' ? 'default' : 'outline'}
                  size="sm"
                  onClick={() => setSelectedDataSource('kubernetes')}
                  className="flex items-center gap-2"
                >
                  <Code className="w-4 h-4" />
                  Kubernetes
                </Button>
              </div>
            </CardContent>
          </Card>

          {/* Threat Context */}
          <Card className="bg-blue-50 border-blue-200">
            <CardHeader className="pb-3">
              <CardTitle className="flex items-center justify-between">
                <div className="flex items-center gap-2 text-blue-900">
                  <Target className="w-5 h-5" />
                  Current Threat Scenario
                </div>
                <Button
                  onClick={() => downloadCompletePackage()}
                  className="bg-blue-600 hover:bg-blue-700 text-white"
                  size="sm"
                >
                  <Download className="w-4 h-4 mr-2" />
                  Download Complete Package
                </Button>
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div>
                  <div className="text-sm font-medium text-blue-900">Threat Name</div>
                  <div className="text-sm text-blue-800">{currentThreat.name}</div>
                </div>
                <div>
                  <div className="text-sm font-medium text-blue-900">Category</div>
                  <Badge variant="secondary">{currentThreat.category}</Badge>
                </div>
                <div>
                  <div className="text-sm font-medium text-blue-900">MITRE ATT&CK</div>
                  <div className="flex gap-1">
                    {currentThreat.mitreAttack.map((technique: string) => (
                      <Badge key={technique} variant="outline" className="text-xs">{technique}</Badge>
                    ))}
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-4 gap-6">
          
          {/* Content Type Selection */}
          <div className="lg:col-span-1">
            <Card>
              <CardHeader>
                <CardTitle className="text-lg">Content Types</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-2">
                  {contentTypes.map((type) => {
                    const Icon = type.icon;
                    const isActive = type.id === activeContentType;
                    
                    return (
                      <button
                        key={type.id}
                        onClick={() => setActiveContentType(type.id)}
                        className={`w-full flex items-center gap-3 p-3 rounded-lg text-left transition-all ${
                          isActive 
                            ? 'bg-blue-50 text-blue-700 border border-blue-200' 
                            : 'hover:bg-gray-50 text-gray-600'
                        }`}
                      >
                        <div className={`p-2 rounded ${type.color} text-white`}>
                          <Icon className="w-4 h-4" />
                        </div>
                        <div>
                          <div className="text-sm font-medium">{type.name}</div>
                          <div className="text-xs opacity-75">{type.description}</div>
                        </div>
                      </button>
                    );
                  })}
                </div>
                
                <Button 
                  onClick={generateContent}
                  disabled={isGenerating}
                  className="w-full mt-4"
                >
                  {isGenerating ? (
                    <>
                      <RefreshCw className="w-4 h-4 mr-2 animate-spin" />
                      Generating...
                    </>
                  ) : (
                    <>
                      <Play className="w-4 h-4 mr-2" />
                      Generate Content
                    </>
                  )}
                </Button>

                {/* DDLC Progress */}
                {isGenerating && (
                  <div className="mt-4 p-3 bg-gray-50 rounded-lg">
                    <div className="text-sm font-medium mb-2">DDLC Phase</div>
                    <div className="flex items-center gap-2">
                      <Clock className="w-4 h-4 text-blue-600" />
                      <span className="text-sm capitalize">{generationPhase}</span>
                    </div>
                  </div>
                )}
              </CardContent>
            </Card>
          </div>

          {/* Generated Content */}
          <div className="lg:col-span-3">
            <Card>
              <CardHeader>
                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-3">
                    {activeType && (
                      <div className={`p-2 rounded ${activeType.color} text-white`}>
                        <activeType.icon className="w-5 h-5" />
                      </div>
                    )}
                    <div>
                      <CardTitle>{activeType?.name}</CardTitle>
                      <p className="text-sm text-gray-600">{activeContent?.title}</p>
                    </div>
                  </div>
                  <div className="flex gap-2">
                    {activeContentType === 'correlation' && (
                      <Button
                        variant="outline"
                        size="sm" 
                        onClick={() => setShowXQLPreview(true)}
                      >
                        <Eye className="w-4 h-4 mr-2" />
                        Preview XQL
                      </Button>
                    )}
                    {activeContentType === 'playbook' && (
                      <Button
                        variant="outline"
                        size="sm" 
                        onClick={() => setShowPlaybookPreview(true)}
                      >
                        <Eye className="w-4 h-4 mr-2" />
                        Preview Playbook
                      </Button>
                    )}
                    {activeContentType === 'layout' && (
                      <Button
                        variant="outline"
                        size="sm" 
                        onClick={() => setShowLayoutPreview(true)}
                      >
                        <Eye className="w-4 h-4 mr-2" />
                        Preview Layout
                      </Button>
                    )}
                    {activeContentType === 'dashboard' && (
                      <Button
                        variant="outline"
                        size="sm" 
                        onClick={() => setShowDashboardPreview(true)}
                      >
                        <Eye className="w-4 h-4 mr-2" />
                        Preview Dashboard
                      </Button>
                    )}
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => copyToClipboard(activeContent?.content || '')}
                    >
                      <Copy className="w-4 h-4 mr-2" />
                      Copy
                    </Button>
                    <Button 
                      variant="outline" 
                      size="sm"
                      onClick={() => downloadSingleContent(activeContentType)}
                    >
                      <Download className="w-4 h-4 mr-2" />
                      Download
                    </Button>
                  </div>
                </div>
              </CardHeader>
              <CardContent>
                <Tabs defaultValue="content" className="w-full">
                  <TabsList className="grid w-full grid-cols-2">
                    <TabsTrigger value="content">Generated Content</TabsTrigger>
                    <TabsTrigger value="validation">DDLC Validation</TabsTrigger>
                  </TabsList>
                  
                  <TabsContent value="content">
                    <div className="mt-4">
                      <Textarea
                        value={activeContent?.content || ''}
                        readOnly
                        className="font-mono text-xs min-h-[500px]"
                      />
                    </div>
                  </TabsContent>
                  
                  <TabsContent value="validation">
                    <div className="mt-4 space-y-4">
                      {activeContent?.validation && Object.entries(activeContent.validation).map(([key, value]) => (
                        <div key={key} className="flex items-center gap-2 p-3 bg-green-50 rounded-lg">
                          <CheckCircle className="w-4 h-4 text-green-600" />
                          <span className="text-sm font-medium capitalize">{key}:</span>
                          <span className="text-sm text-green-800">{value}</span>
                        </div>
                      ))}
                      
                      <div className="mt-6 p-4 bg-blue-50 rounded-lg">
                        <h4 className="font-semibold text-blue-900 mb-2">DDLC Phase: {activeType?.ddlcPhase}</h4>
                        <p className="text-sm text-blue-800">
                          This content has been generated and validated according to the 
                          {activeType?.ddlcPhase === 'development' ? ' Development' : 
                           activeType?.ddlcPhase === 'design' ? ' Design' : ' Monitoring'} phase 
                          of the NVISO Detection Development Life Cycle framework.
                        </p>
                      </div>
                    </div>
                  </TabsContent>
                </Tabs>
              </CardContent>
            </Card>
          </div>
        </div>
        </>
        )}

        {/* XQL Preview Modal */}
        <XQLPreviewModal
          isOpen={showXQLPreview}
          onClose={() => setShowXQLPreview(false)}
          xqlQuery={activeContentType === 'correlation' ? 
            `dataset = xdr_data
| filter event_type = "vpn_connect"
| filter action_country != user_previous_countries.[0]
| eval risk_score = case(
    user_groups contains "Executives", 5,
    user_groups contains "IT_Admin", 3,
    action_country in ("CN", "RU", "IR", "KP"), 4,
    true, 3
  )
| where risk_score >= 3
| fields _time, action_user, action_country, source_ip, user_groups, risk_score` 
            : ''
          }
          ruleName="VPN Anomaly Detection Rule"
          description="Detects VPN connections from unusual geographic locations based on user profile and country risk assessment"
        />

        {/* Playbook Preview Modal */}
        <PlaybookPreviewModal
          isOpen={showPlaybookPreview}
          onClose={() => setShowPlaybookPreview(false)}
          playbookData={{
            name: "VPN Anomaly Response Playbook",
            description: "Automated response to suspicious VPN connections from high-risk locations",
            version: "1.0",
            tasks: [
              {
                id: "0",
                name: "Start Investigation",
                type: "start",
                description: "Begin VPN anomaly investigation workflow",
                nexttasks: { "#none#": ["1"] }
              },
              {
                id: "1",
                name: "Gather User Context",
                type: "regular",
                description: "Collect user profile and recent activity data",
                scriptarguments: {
                  username: { simple: "${alert.action_user}" },
                  timeframe: { simple: "24h" }
                },
                nexttasks: { "#none#": ["2"] }
              },
              {
                id: "2",
                name: "Risk Assessment",
                type: "condition",
                description: "Evaluate risk level based on user profile and location",
                nexttasks: { 
                  "High Risk": ["3"],
                  "Medium Risk": ["4"],
                  "Low Risk": ["5"]
                }
              },
              {
                id: "3",
                name: "Immediate Account Lockdown",
                type: "regular",
                description: "Lock user account and notify security team",
                scriptarguments: {
                  action: { simple: "lock_account" },
                  notify: { simple: "security_team" }
                }
              }
            ],
            inputs: [
              {
                key: "alert_id",
                value: "${alert.id}",
                required: true,
                description: "Unique identifier for the VPN anomaly alert"
              },
              {
                key: "user_context",
                value: "auto",
                required: false,
                description: "Additional user context for investigation"
              }
            ],
            outputs: [
              {
                key: "investigation_status",
                description: "Status of the VPN anomaly investigation",
                type: "string"
              },
              {
                key: "risk_score",
                description: "Calculated risk score for the event",
                type: "number"
              }
            ]
          }}
        />

        {/* Alert Layout Preview Modal */}
        <AlertLayoutPreviewModal
          isOpen={showLayoutPreview}
          onClose={() => setShowLayoutPreview(false)}
          selectedDataSource={selectedDataSource}
          layoutData={{
            name: "VPN Anomaly Alert Layout",
            description: "Custom layout for VPN anomaly detection alerts",
            tabs: [
              {
                id: "summary",
                name: "Alert Summary",
                type: "summary",
                sections: [
                  {
                    displayType: "ROW",
                    items: [
                      { fieldId: "timestamp", height: 26, startCol: 0, endCol: 2, sectionItemType: "field" },
                      { fieldId: "alertid", height: 26, startCol: 0, endCol: 2, sectionItemType: "field" },
                      { fieldId: "severity", height: 26, startCol: 0, endCol: 2, sectionItemType: "field" },
                      { fieldId: "source_country", height: 26, startCol: 0, endCol: 2, sectionItemType: "field" }
                    ]
                  }
                ]
              },
              {
                id: "user_details",
                name: "User Details",
                type: "custom",
                sections: [
                  {
                    displayType: "ROW",
                    items: [
                      { fieldId: "action_user", height: 26, startCol: 0, endCol: 2, sectionItemType: "field" },
                      { fieldId: "user_groups", height: 26, startCol: 0, endCol: 2, sectionItemType: "field" },
                      { fieldId: "user_location", height: 26, startCol: 0, endCol: 2, sectionItemType: "field" },
                      { fieldId: "risk_score", height: 26, startCol: 0, endCol: 2, sectionItemType: "field" }
                    ]
                  }
                ]
              },
              {
                id: "network_info",
                name: "Network Information",
                type: "custom",
                sections: [
                  {
                    displayType: "ROW",
                    items: [
                      { fieldId: "source_ip", height: 26, startCol: 0, endCol: 2, sectionItemType: "field" },
                      { fieldId: "vpn_server", height: 26, startCol: 0, endCol: 2, sectionItemType: "field" },
                      { fieldId: "connection_time", height: 26, startCol: 0, endCol: 2, sectionItemType: "field" },
                      { fieldId: "session_duration", height: 26, startCol: 0, endCol: 2, sectionItemType: "field" }
                    ]
                  }
                ]
              }
            ],
            fields: [
              { fieldId: "timestamp", displayName: "Alert Time", type: "date", description: "When the anomaly was detected" },
              { fieldId: "alertid", displayName: "Alert ID", type: "text", description: "Unique alert identifier" },
              { fieldId: "severity", displayName: "Severity", type: "text", description: "Alert severity level" },
              { fieldId: "source_country", displayName: "Source Country", type: "text", description: "Country of VPN connection" },
              { fieldId: "action_user", displayName: "User", type: "user", description: "User account involved" },
              { fieldId: "user_groups", displayName: "User Groups", type: "text", description: "Active Directory groups" },
              { fieldId: "user_location", displayName: "User Location", type: "text", description: "User's typical location" },
              { fieldId: "risk_score", displayName: "Risk Score", type: "number", description: "Calculated risk level" },
              { fieldId: "source_ip", displayName: "Source IP", type: "ip", description: "VPN connection IP address" },
              { fieldId: "vpn_server", displayName: "VPN Server", type: "text", description: "VPN server endpoint" },
              { fieldId: "connection_time", displayName: "Connection Time", type: "date", description: "VPN session start time" },
              { fieldId: "session_duration", displayName: "Session Duration", type: "text", description: "Length of VPN session" }
            ]
          }}
        />

        {/* Dashboard Preview Modal */}
        <DashboardPreviewModal
          isOpen={showDashboardPreview}
          onClose={() => setShowDashboardPreview(false)}
          dashboardData={{
            name: "VPN Security Monitoring Dashboard",
            description: "Real-time monitoring of VPN connections and anomaly detection",
            layout: [
              {
                id: "row-1",
                data: [
                  {
                    key: "vpn_trend_widget",
                    data: {
                      type: "Custom XQL",
                      width: 100,
                      height: 400,
                      phrase: `dataset = xdr_data
| filter event_type = "vpn_connect" 
| bin _time span = 1h
| comp count() as connections by _time, action_country
| sort asc _time`,
                      viewOptions: {
                        type: "line",
                        commands: [
                          { command: { op: "=", name: "xaxis", value: "_time" } },
                          { command: { op: "=", name: "yaxis", value: "connections" } }
                        ]
                      },
                      time_frame: { relativeTime: 86400000 }
                    }
                  }
                ]
              },
              {
                id: "row-2",  
                data: [
                  {
                    key: "country_distribution",
                    data: {
                      type: "Custom XQL",
                      width: 50,
                      height: 400,
                      phrase: `dataset = xdr_data
| filter event_type = "vpn_connect"
| comp count() as connections by action_country
| sort desc connections
| limit 10`,
                      viewOptions: {
                        type: "pie",
                        commands: [
                          { command: { op: "=", name: "xaxis", value: "action_country" } },
                          { command: { op: "=", name: "yaxis", value: "connections" } }
                        ]
                      },
                      time_frame: { relativeTime: 86400000 }
                    }
                  },
                  {
                    key: "risk_alerts_table",
                    data: {
                      type: "Custom XQL", 
                      width: 50,
                      height: 400,
                      phrase: `dataset = xdr_data
| filter event_type = "vpn_connect"
| filter action_country in ("CN", "RU", "IR", "KP")
| eval risk_score = case(
    user_groups contains "Executives", 5,
    user_groups contains "IT_Admin", 3,
    true, 4
  )
| where risk_score >= 3
| fields _time, action_user, action_country, source_ip, risk_score
| sort desc _time`,
                      viewOptions: {
                        type: "table",
                        commands: []
                      },
                      time_frame: { relativeTime: 86400000 }
                    }
                  }
                ]
              }
            ],
            widgets: [
              {
                widget_key: "vpn_trend_widget",
                title: "VPN Connection Trends",
                description: "Hourly VPN connection volume by country",
                data: {
                  phrase: `dataset = xdr_data
| filter event_type = "vpn_connect" 
| bin _time span = 1h
| comp count() as connections by _time, action_country
| sort asc _time`,
                  viewOptions: {
                    type: "line",
                    commands: [
                      { command: { op: "=", name: "xaxis", value: "_time" } },
                      { command: { op: "=", name: "yaxis", value: "connections" } }
                    ]
                  },
                  time_frame: { relativeTime: 86400000 }
                }
              },
              {
                widget_key: "country_distribution",
                title: "VPN Connections by Country",
                description: "Geographic distribution of VPN connections",
                data: {
                  phrase: `dataset = xdr_data
| filter event_type = "vpn_connect"
| comp count() as connections by action_country
| sort desc connections
| limit 10`,
                  viewOptions: {
                    type: "pie",
                    commands: [
                      { command: { op: "=", name: "xaxis", value: "action_country" } },
                      { command: { op: "=", name: "yaxis", value: "connections" } }
                    ]
                  },
                  time_frame: { relativeTime: 86400000 }
                }
              },
              {
                widget_key: "risk_alerts_table",
                title: "High Risk VPN Alerts",
                description: "VPN connections from high-risk countries requiring investigation",
                data: {
                  phrase: `dataset = xdr_data
| filter event_type = "vpn_connect"
| filter action_country in ("CN", "RU", "IR", "KP")
| eval risk_score = case(
    user_groups contains "Executives", 5,
    user_groups contains "IT_Admin", 3,
    true, 4
  )
| where risk_score >= 3
| fields _time, action_user, action_country, source_ip, risk_score
| sort desc _time`,
                  viewOptions: {
                    type: "table",
                    commands: []
                  },
                  time_frame: { relativeTime: 86400000 }
                }
              }
            ]
          }}
        />
      </div>
    </div>
  );
}