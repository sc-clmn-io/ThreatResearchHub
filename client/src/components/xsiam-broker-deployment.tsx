import { useState } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';

import { Alert, AlertDescription } from '@/components/ui/alert';
import { Badge } from '@/components/ui/badge';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Server, Download, Terminal, Shield, Network, CheckCircle } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';

export function XSIAMBrokerDeployment() {
  const [proxmoxConfig, setProxmoxConfig] = useState({
    vmid: '200',
    name: 'xsiam-broker',
    cores: '2',
    memory: '4096',
    storage: 'local-lvm',
    network: 'vmbr0',
    qcow2Path: '/var/lib/vz/template/iso/cortex-xdr-broker.qcow2'
  });

  const [xsiamConfig, setXSIAMConfig] = useState({
    apiKey: '',
    brokerUrl: '',
    tenantId: '',
    orgId: ''
  });

  const { toast } = useToast();

  const generateProxmoxScript = () => {
    const script = `#!/bin/bash
# XSIAM Broker VM Deployment Script for Proxmox
# Generated by ThreatResearchHub

set -e

echo "🚀 Starting XSIAM Broker VM deployment..."

# Configuration
VMID=${proxmoxConfig.vmid}
VM_NAME="${proxmoxConfig.name}"
CORES=${proxmoxConfig.cores}
MEMORY=${proxmoxConfig.memory}
STORAGE="${proxmoxConfig.storage}"
NETWORK_BRIDGE="${proxmoxConfig.network}"
QCOW2_IMAGE="${proxmoxConfig.qcow2Path}"

# Check if qcow2 image exists
if [ ! -f "$QCOW2_IMAGE" ]; then
    echo "❌ Error: qcow2 image not found at $QCOW2_IMAGE"
    echo "Please ensure the Cortex XDR broker image is downloaded to this location"
    exit 1
fi

echo "✅ Found qcow2 image: $QCOW2_IMAGE"

# Check if VM already exists
if qm status $VMID >/dev/null 2>&1; then
    echo "⚠️  VM $VMID already exists. Removing..."
    qm stop $VMID --timeout 30 || true
    qm destroy $VMID
fi

echo "📦 Creating VM $VMID ($VM_NAME)..."

# Create VM
qm create $VMID \\
    --name "$VM_NAME" \\
    --cores $CORES \\
    --memory $MEMORY \\
    --net0 virtio,bridge=$NETWORK_BRIDGE \\
    --ostype l26 \\
    --scsi0 $STORAGE:0,import-from=$QCOW2_IMAGE,format=qcow2 \\
    --boot order=scsi0 \\
    --agent enabled=1 \\
    --description "Cortex XSIAM Data Broker - Deployed by ThreatResearchHub"

echo "🔧 Configuring VM settings..."

# Set additional settings
qm set $VMID --serial0 socket --vga serial0
qm set $VMID --cpu host
qm set $VMID --balloon 0

echo "🔌 Starting VM..."
qm start $VMID

echo "⏳ Waiting for VM to boot (60 seconds)..."
sleep 60

# Get VM IP address
VM_IP=$(qm guest cmd $VMID network-get-interfaces | grep -A 5 '"name":"eth0"' | grep '"ip-address"' | head -1 | sed 's/.*"ip-address":"\\([^"]*\\)".*/\\1/' || echo "")

if [ -n "$VM_IP" ]; then
    echo "✅ VM deployed successfully!"
    echo "   VM ID: $VMID"
    echo "   VM Name: $VM_NAME"
    echo "   IP Address: $VM_IP"
    echo "   Access: https://$VM_IP:443"
else
    echo "⚠️  VM created but IP not detected yet. Check Proxmox console."
fi

echo ""
echo "🔧 Next Steps:"
echo "1. Access the broker web interface at https://$VM_IP:443"
echo "2. Complete initial setup with your XSIAM credentials"
echo "3. Configure data source forwarding"
echo "4. Test connectivity to XSIAM"

echo ""
echo "📋 VM Details:"
echo "   Cores: $CORES"
echo "   Memory: \$MEMORY MB"
echo "   Storage: $STORAGE"
echo "   Network: $NETWORK_BRIDGE"
`;

    return script;
  };

  const generateXSIAMConfig = () => {
    const config = `# XSIAM Broker Configuration
# Copy this configuration for broker setup

# XSIAM Connection Settings
YOUR_XSIAM_API_KEY="${xsiamConfig.apiKey}"
XSIAM_BROKER_URL="${xsiamConfig.brokerUrl}"
XSIAM_TENANT_ID="${xsiamConfig.tenantId}"
XSIAM_ORG_ID="${xsiamConfig.orgId}"

# Data Source Configuration
# Configure these on the broker web interface:
# - Windows Event Logs (Security, System, Application)
# - Sysmon Events
# - Network Device Logs
# - Application Logs
# - Custom Log Sources

# Network Configuration
# Ensure broker can reach:
# - XSIAM tenant URL
# - Log sources in your network
# - DNS resolution for XSIAM services
`;

    return config;
  };

  const downloadScript = () => {
    const script = generateProxmoxScript();
    const blob = new Blob([script], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'deploy-xsiam-broker.sh';
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);

    toast({
      title: "Script Downloaded",
      description: "Proxmox deployment script saved as deploy-xsiam-broker.sh"
    });
  };

  const downloadConfig = () => {
    const config = generateXSIAMConfig();
    const blob = new Blob([config], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'xsiam-broker-config.txt';
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);

    toast({
      title: "Configuration Downloaded",
      description: "XSIAM configuration saved as xsiam-broker-config.txt"
    });
  };

  return (
    <div className="space-y-6">
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Server className="h-5 w-5" />
            XSIAM Broker VM Deployment
          </CardTitle>
          <CardDescription>
            Deploy Cortex XSIAM Data Broker on your Proxmox server for log forwarding
          </CardDescription>
        </CardHeader>
        <CardContent>
          <Alert className="mb-4">
            <Shield className="h-4 w-4" />
            <AlertDescription>
              <strong>Prerequisites:</strong> Cortex XDR broker qcow2 image downloaded to Proxmox server, 
              valid XSIAM API credentials, and network connectivity to XSIAM tenant.
            </AlertDescription>
          </Alert>

          <Tabs defaultValue="proxmox" className="w-full">
            <TabsList className="grid w-full grid-cols-3">
              <TabsTrigger value="proxmox">Proxmox Settings</TabsTrigger>
              <TabsTrigger value="xsiam">XSIAM Config</TabsTrigger>
              <TabsTrigger value="deployment">Deploy</TabsTrigger>
            </TabsList>
            
            <TabsContent value="proxmox" className="space-y-4">
              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label>VM ID</Label>
                  <Input
                    value={proxmoxConfig.vmid}
                    onChange={(e) => setProxmoxConfig(prev => ({ ...prev, vmid: e.target.value }))}
                    placeholder="200"
                  />
                </div>
                <div className="space-y-2">
                  <Label>VM Name</Label>
                  <Input
                    value={proxmoxConfig.name}
                    onChange={(e) => setProxmoxConfig(prev => ({ ...prev, name: e.target.value }))}
                    placeholder="xsiam-broker"
                  />
                </div>
                <div className="space-y-2">
                  <Label>CPU Cores</Label>
                  <Input
                    value={proxmoxConfig.cores}
                    onChange={(e) => setProxmoxConfig(prev => ({ ...prev, cores: e.target.value }))}
                    placeholder="2"
                  />
                </div>
                <div className="space-y-2">
                  <Label>Memory (MB)</Label>
                  <Input
                    value={proxmoxConfig.memory}
                    onChange={(e) => setProxmoxConfig(prev => ({ ...prev, memory: e.target.value }))}
                    placeholder="4096"
                  />
                </div>
                <div className="space-y-2">
                  <Label>Storage</Label>
                  <Input
                    value={proxmoxConfig.storage}
                    onChange={(e) => setProxmoxConfig(prev => ({ ...prev, storage: e.target.value }))}
                    placeholder="local-lvm"
                  />
                </div>
                <div className="space-y-2">
                  <Label>Network Bridge</Label>
                  <Input
                    value={proxmoxConfig.network}
                    onChange={(e) => setProxmoxConfig(prev => ({ ...prev, network: e.target.value }))}
                    placeholder="vmbr0"
                  />
                </div>
                <div className="space-y-2 col-span-2">
                  <Label>qcow2 Image Path</Label>
                  <Input
                    value={proxmoxConfig.qcow2Path}
                    onChange={(e) => setProxmoxConfig(prev => ({ ...prev, qcow2Path: e.target.value }))}
                    placeholder="/var/lib/vz/template/iso/cortex-xdr-broker.qcow2"
                  />
                </div>
              </div>
            </TabsContent>
            
            <TabsContent value="xsiam" className="space-y-4">
              <div className="space-y-4">
                <div className="space-y-2">
                  <Label>XSIAM API Key</Label>
                  <Input
                    type="password"
                    value={xsiamConfig.apiKey}
                    onChange={(e) => setXSIAMConfig(prev => ({ ...prev, apiKey: e.target.value }))}
                    placeholder="Enter your XSIAM API key"
                  />
                </div>
                <div className="space-y-2">
                  <Label>XSIAM Broker URL</Label>
                  <Input
                    value={xsiamConfig.brokerUrl}
                    onChange={(e) => setXSIAMConfig(prev => ({ ...prev, brokerUrl: e.target.value }))}
                    placeholder="https://your-tenant.xdr.us.paloaltonetworks.com"
                  />
                </div>
                <div className="space-y-2">
                  <Label>Tenant ID</Label>
                  <Input
                    value={xsiamConfig.tenantId}
                    onChange={(e) => setXSIAMConfig(prev => ({ ...prev, tenantId: e.target.value }))}
                    placeholder="Your XSIAM tenant ID"
                  />
                </div>
                <div className="space-y-2">
                  <Label>Organization ID</Label>
                  <Input
                    value={xsiamConfig.orgId}
                    onChange={(e) => setXSIAMConfig(prev => ({ ...prev, orgId: e.target.value }))}
                    placeholder="Your organization ID"
                  />
                </div>
              </div>
            </TabsContent>
            
            <TabsContent value="deployment" className="space-y-4">
              <div className="space-y-4">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <Button onClick={downloadScript} className="flex items-center gap-2">
                    <Download className="h-4 w-4" />
                    Download Proxmox Script
                  </Button>
                  <Button onClick={downloadConfig} variant="outline" className="flex items-center gap-2">
                    <Download className="h-4 w-4" />
                    Download XSIAM Config
                  </Button>
                </div>
                
                <Card>
                  <CardHeader>
                    <CardTitle className="text-base">Deployment Steps</CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-3">
                    <div className="flex items-start gap-3">
                      <Badge variant="outline">1</Badge>
                      <div>
                        <p className="font-medium">Upload Script to Proxmox</p>
                        <p className="text-sm text-muted-foreground">
                          Copy the deployment script to your Proxmox server
                        </p>
                      </div>
                    </div>
                    
                    <div className="flex items-start gap-3">
                      <Badge variant="outline">2</Badge>
                      <div>
                        <p className="font-medium">Make Script Executable</p>
                        <code className="text-xs bg-muted p-1 rounded block mt-1">chmod +x deploy-xsiam-broker.sh</code>
                      </div>
                    </div>
                    
                    <div className="flex items-start gap-3">
                      <Badge variant="outline">3</Badge>
                      <div>
                        <p className="font-medium">Run Deployment</p>
                        <code className="text-xs bg-muted p-1 rounded block mt-1">./deploy-xsiam-broker.sh</code>
                      </div>
                    </div>
                    
                    <div className="flex items-start gap-3">
                      <Badge variant="outline">4</Badge>
                      <div>
                        <p className="font-medium">Configure Broker</p>
                        <p className="text-sm text-muted-foreground">
                          Access broker web interface and complete setup with XSIAM credentials
                        </p>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              </div>
            </TabsContent>
          </Tabs>
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Network className="h-5 w-5" />
            Post-Deployment Configuration
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <h4 className="font-medium mb-2">Data Source Integration</h4>
              <ul className="text-sm space-y-1">
                <li>• Windows Event Logs (Security, System, Application)</li>
                <li>• Sysmon Event Collection</li>
                <li>• Network Device Logs (Firewalls, Switches)</li>
                <li>• Application and Custom Logs</li>
              </ul>
            </div>
            
            <div>
              <h4 className="font-medium mb-2">Network Requirements</h4>
              <ul className="text-sm space-y-1">
                <li>• Outbound HTTPS (443) to XSIAM tenant</li>
                <li>• Access to log sources in your network</li>
                <li>• DNS resolution for XSIAM services</li>
                <li>• NTP synchronization for accurate timestamps</li>
              </ul>
            </div>
          </div>
          
          <Alert>
            <CheckCircle className="h-4 w-4" />
            <AlertDescription>
              Once the broker is deployed and configured, all lab infrastructure can forward logs 
              to XSIAM for centralized threat detection and analysis.
            </AlertDescription>
          </Alert>
        </CardContent>
      </Card>
    </div>
  );
}